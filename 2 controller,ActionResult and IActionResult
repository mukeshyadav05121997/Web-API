create folder Data:
namespace Villa_API.Data
{
    public static class VillaStore
    {
        public static List<VillaDTO> villastore = new List<VillaDTO> {
            new VillaDTO{Id=1,Name="BogmalloBeach" },
            new VillaDTO{Id=2,Name="ResortBeach" },
        };
    }
}

Create controller:
ActionResult:we have to defined the return. 
Iactionresult: if we dont know the return type.

using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.JsonPatch;
using Microsoft.AspNetCore.Mvc;
using System.Net;
using Villa_API.Data;
using Villa_API.Model;
using Villa_API.Model.DTO;

namespace Villa_API.Controllers
{
    [Route("api/Villa")]
    [ApiController]
    public class VillaController: ControllerBase
    {
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<VillaDTO>> getVillas()
        {
            return Ok(VillaStore.villastore);
        }

        [HttpGet("ID",Name ="Villas")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]

        public ActionResult<VillaDTO> getVilla(int ID)
        {
            try
            {
                if (ID == null)
                {
                    return BadRequest();

                }

                var villainfo = VillaStore.villastore.FirstOrDefault(q => q.Id == ID);

                if (villainfo == null)
                {
                    return NotFound();
                }

                return Ok(villainfo);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            return null;
        }

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        public ActionResult<VillaDTO> CreateVilla(VillaDTO villa) 
        {
            if(!ModelState.IsValid)
            {
                return BadRequest(villa);

            }
            if(villa == null)
            {
                return BadRequest(villa);
            }

            if(villa.Id>0)
            {
                return StatusCode(StatusCodes.Status400BadRequest);
            }

            villa.Id=VillaStore.villastore.OrderByDescending(u=>u.Id).FirstOrDefault().Id + 1;
            VillaStore.villastore.Add(villa);
            return CreatedAtRoute("Villas",new { id=villa.Id},villa); 
        }

        [HttpDelete("Id")]
        public ActionResult DeleteVilla(int id) 
        {
            if(id==null)
            {
                return BadRequest();
            }

            var villaID=VillaStore.villastore.FirstOrDefault(u=>u.Id==id);
            VillaStore.villastore.Remove(villaID);
            return NoContent();
        }

        [HttpPut("Id")]
        public IActionResult EditVilla(int Id,[FromBody]VillaDTO villaDTO)
        {
            if(Id == null || Id!= villaDTO.Id)
            {
                return BadRequest(villaDTO);
            }
            var villaDetails=VillaStore.villastore.FirstOrDefault(u=>u.Id==Id);
            villaDetails.Name=villaDTO.Name;

            return NoContent() ;

        }

        [HttpPatch("Id")]
        public IActionResult EditSmallChage(int Id,JsonPatchDocument<VillaDTO> jsonPatch)
        { 
            if(Id ==null || jsonPatch ==null)
            {
                return BadRequest();
            }

            var villaRecord = VillaStore.villastore.FirstOrDefault(u => u.Id == Id);
             jsonPatch.ApplyTo(villaRecord,ModelState);

            if(!ModelState.IsValid)
            {
                return BadRequest();
            }

            return NoContent();
        }
    }
}


